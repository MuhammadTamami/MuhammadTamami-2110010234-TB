/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSet;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.text.MaskFormatter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.Time;
import javax.swing.JFormattedTextField;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;

/**
 *
 * @author Tama
 */
public class TambahJadwal extends javax.swing.JFrame {
    private TiketPesawat tiketPesawat;
    private static final String DB_URL = "jdbc:mysql://localhost:3306/db_tiketpesawat"; // Ganti dengan URL database Anda
    private static final String DB_USER = "root";
    private static final String DB_PASSWORD = "";
    private DefaultTableModel tableModel;
    private String jamComboBoxValue;

    /**
     * Creates new form TambahJadwal
     */
    public TambahJadwal(TiketPesawat tiketPesawat) {
        this.tiketPesawat = tiketPesawat;
    initComponents();
    setSize(550, 458);
    setLocationRelativeTo(null);
    tfAsal.setText("Banjarmasin");
    jamComboBoxValue = (String) cbJam.getItemAt(0);
    isiCbKota();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfMaskapai = new javax.swing.JTextField();
        tfAsal = new javax.swing.JTextField();
        tfHarga = new javax.swing.JTextField();
        tfID = new javax.swing.JTextField();
        cbHari = new javax.swing.JComboBox<>();
        btnHitung = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnSimpan = new javax.swing.JButton();
        cbTipe = new javax.swing.JComboBox<>();
        cbTujuan = new javax.swing.JComboBox<>();
        cbJam = new javax.swing.JComboBox<>();
        btnKembali = new javax.swing.JButton();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel2.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel2.setText("Harga");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(340, 270, 50, 18);

        jLabel3.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel3.setText("ID Penerbangan");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(30, 100, 111, 18);

        jLabel4.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel4.setText("Nama Maskapai");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 150, 130, 18);

        jLabel5.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel5.setText("Asal");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(30, 200, 30, 18);

        jLabel6.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel6.setText("Tujuan");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(30, 270, 50, 18);

        jLabel7.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel7.setText("Hari");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(340, 100, 40, 18);

        jLabel8.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel8.setText("Jam");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(340, 150, 30, 18);

        jLabel9.setFont(new java.awt.Font("Sitka Text", 1, 14)); // NOI18N
        jLabel9.setText("Tipe");
        getContentPane().add(jLabel9);
        jLabel9.setBounds(340, 210, 40, 18);

        tfMaskapai.setFont(new java.awt.Font("Sitka Subheading", 0, 14)); // NOI18N
        getContentPane().add(tfMaskapai);
        tfMaskapai.setBounds(160, 142, 130, 30);

        tfAsal.setFont(new java.awt.Font("Sitka Subheading", 0, 14)); // NOI18N
        tfAsal.setEnabled(false);
        tfAsal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfAsalActionPerformed(evt);
            }
        });
        getContentPane().add(tfAsal);
        tfAsal.setBounds(160, 200, 130, 30);

        tfHarga.setFont(new java.awt.Font("Sitka Subheading", 0, 14)); // NOI18N
        getContentPane().add(tfHarga);
        tfHarga.setBounds(400, 260, 110, 30);

        tfID.setFont(new java.awt.Font("Sitka Subheading", 0, 14)); // NOI18N
        getContentPane().add(tfID);
        tfID.setBounds(160, 90, 70, 30);

        cbHari.setFont(new java.awt.Font("Sitka Subheading", 0, 14)); // NOI18N
        cbHari.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Senin", "Selasa", "Rabu", "Kamis", "Jum'at", "Sabtu", "Minggu" }));
        getContentPane().add(cbHari);
        cbHari.setBounds(400, 90, 90, 30);

        btnHitung.setBackground(new java.awt.Color(153, 153, 153));
        btnHitung.setFont(new java.awt.Font("Sitka Display", 1, 14)); // NOI18N
        btnHitung.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pricing.png"))); // NOI18N
        btnHitung.setText("HITUNG");
        btnHitung.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        btnHitung.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHitungActionPerformed(evt);
            }
        });
        getContentPane().add(btnHitung);
        btnHitung.setBounds(390, 330, 110, 30);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel1.setOpaque(false);
        jPanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Sitka Heading", 1, 24)); // NOI18N
        jLabel1.setText("TAMBAH JADWAL");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(180, 20, 194, 31);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 550, 60);

        btnSimpan.setBackground(new java.awt.Color(153, 153, 153));
        btnSimpan.setFont(new java.awt.Font("Sitka Display", 1, 14)); // NOI18N
        btnSimpan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/floppy-disk.png"))); // NOI18N
        btnSimpan.setText("SIMPAN");
        btnSimpan.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });
        getContentPane().add(btnSimpan);
        btnSimpan.setBounds(390, 370, 110, 30);

        cbTipe.setFont(new java.awt.Font("Sitka Subheading", 0, 14)); // NOI18N
        cbTipe.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ekonomi", "Bisnis" }));
        getContentPane().add(cbTipe);
        cbTipe.setBounds(400, 200, 90, 30);

        cbTujuan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTujuanActionPerformed(evt);
            }
        });
        getContentPane().add(cbTujuan);
        cbTujuan.setBounds(160, 260, 130, 30);

        cbJam.setFont(new java.awt.Font("Sitka Subheading", 0, 14)); // NOI18N
        cbJam.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00", "24:00" }));
        cbJam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbJamActionPerformed(evt);
            }
        });
        getContentPane().add(cbJam);
        cbJam.setBounds(400, 142, 90, 30);

        btnKembali.setBackground(new java.awt.Color(153, 153, 153));
        btnKembali.setFont(new java.awt.Font("Sitka Display", 1, 14)); // NOI18N
        btnKembali.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow-left.png"))); // NOI18N
        btnKembali.setText("KEMBALI");
        btnKembali.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        btnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKembaliActionPerformed(evt);
            }
        });
        getContentPane().add(btnKembali);
        btnKembali.setBounds(260, 370, 110, 30);

        background.setFont(new java.awt.Font("Sitka Subheading", 0, 14)); // NOI18N
        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/bg-tambah-jadwal.png"))); // NOI18N
        getContentPane().add(background);
        background.setBounds(0, 0, 550, 420);

        pack();
    }// </editor-fold>//GEN-END:initComponents

 
    private void btnHitungActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHitungActionPerformed
        // TODO add your handling code here:
         if (isValidTimeFormat(jamComboBoxValue)) {
            double waktu = konversiJamKeDouble(jamComboBoxValue);
            hitungharga(waktu);
        } else {
            JOptionPane.showMessageDialog(this, "Format waktu tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnHitungActionPerformed

    
    private boolean isValidTimeFormat(String jam) {
    try {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        sdf.setLenient(false);
        Date parsedDate = sdf.parse(jam);

        // Check if the parsed date is not null, meaning the time format is valid
        return parsedDate != null;
    } catch (ParseException e) {
        return false;
    }
}



private double konversiJamKeDouble(String jam) {
    try {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        Date date = sdf.parse(jam);
        return date.getHours() + date.getMinutes() / 60.0;
    } catch (ParseException e) {
        e.printStackTrace();
        return 0.0; // Default jika terjadi kesalahan parsing
    }
}


    
    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        // TODO add your handling code here:
            try {
        // Mendapatkan nilai waktu dari jamComboBox
        String jamComboBoxValue = (String) cbJam.getSelectedItem();

        if (isValidTimeFormat(jamComboBoxValue)) {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
            LocalTime localTime = LocalTime.parse(jamComboBoxValue, formatter);

            // Save the localTime to the database
            saveDataToDatabase(localTime);

            this.dispose();

            // Menggunakan nilai userRole yang sudah diatur sebelumnya pada saat login
            // Menggunakan nilai userRole yang sudah diatur sebelumnya pada saat login
            String userRole = LoginGUI.getUserRole();

            // Melakukan validasi peran dan membuat frame TiketPesawat
            TiketPesawat tiketPesawatFrame = new TiketPesawat(userRole);
            tiketPesawatFrame.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Waktu tidak boleh kosong.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Kesalahan saat parsing waktu atau menyimpan data ke database.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void tfAsalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfAsalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfAsalActionPerformed

    private void cbTujuanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTujuanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTujuanActionPerformed

    private void cbJamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbJamActionPerformed
        // TODO add your handling code here:
        jamComboBoxValue = (String) cbJam.getSelectedItem();
    }//GEN-LAST:event_cbJamActionPerformed

    private void btnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKembaliActionPerformed
        // TODO add your handling code here:
        // Menggunakan nilai userRole yang sudah diatur sebelumnya pada saat login
        // Menggunakan nilai userRole yang sudah diatur sebelumnya pada saat login
        String userRole = LoginGUI.getUserRole();

        // Melakukan validasi peran dan membuat frame TiketPesawat
        TiketPesawat tiketPesawatFrame = new TiketPesawat(userRole);
        tiketPesawatFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnKembaliActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        TiketPesawat tiketPesawat = new TiketPesawat("admin");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TambahJadwal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TambahJadwal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TambahJadwal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TambahJadwal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TambahJadwal(tiketPesawat).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JButton btnHitung;
    private javax.swing.JButton btnKembali;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JComboBox<String> cbHari;
    private javax.swing.JComboBox<String> cbJam;
    private javax.swing.JComboBox<String> cbTipe;
    private javax.swing.JComboBox<String> cbTujuan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField tfAsal;
    private javax.swing.JTextField tfHarga;
    private javax.swing.JTextField tfID;
    private javax.swing.JTextField tfMaskapai;
    // End of variables declaration//GEN-END:variables

    private void hitungharga(double waktu) {

    // Validasi format waktu
    String jamComboBoxValue = (String) cbJam.getSelectedItem();
    if (!isValidTimeFormat(jamComboBoxValue)) {
        JOptionPane.showMessageDialog(this, "Format waktu tidak valid.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String asal = tfAsal.getText();
    String tujuan = (String) cbTujuan.getSelectedItem();
    String hari = (String) cbHari.getSelectedItem();
    String kelasPesawat = (String) cbTipe.getSelectedItem();

    // Logika untuk menentukan harga tiket
    double hargaKelas = (kelasPesawat.equals("Bisnis")) ? 1500000 : 800000;
    double hargaHari = (hari.equals("Senin")) ? 0.9 : 1.0;
    double hargaRute = hitungHargaRute(asal, tujuan);
    double hargaJam = hitungHargaJam(waktu);

    // Penghitungan total harga
    double hargaTotal = hargaKelas * hargaHari * hargaRute * hargaJam;
    tfHarga.setText(String.format("%.2f", hargaTotal));
}


// Metode untuk menghitung harga rute
private double hitungHargaRute(String asal, String tujuan) {
    double hargaRute = 1.0;
    if (asal.equals("Banjarmasin")) {
        switch (tujuan) {
            case "Jakarta":
                hargaRute = 1.2;
                break;
            case "Jepang":
                hargaRute = 2.5;
                break;
            case "Bandung":
                hargaRute = 1.8;
                break;
            case "Surabaya":
                hargaRute = 1.5;
                break;
            case "Yogyakarta":
                hargaRute = 1.3;
                break;
            case "Medan":
                hargaRute = 2.0;
                break;
            case "Bali":
                hargaRute = 2.3;
                break;
            case "Amerika":
                hargaRute = 5.0;
                break;
            case "Belanda":
                hargaRute = 3.5;
                break;
            case "Arab Saudi":
                hargaRute = 4.0;
                break;
            case "Jerman":
                hargaRute = 3.8;
                break;
            case "Russia":
                hargaRute = 4.2;
                break;
        }
    }
    return hargaRute;
}


// Metode untuk menghitung harga jam
private double hitungHargaJam(double waktu) {
    return (waktu >= 6.00 && waktu < 12.00) ? 1.2 : 1.0;
    }

   

    public void updateJadwalTable() {
        try {
        Connection connection = koneksi.getConnection();
        if (connection != null) {
            JOptionPane.showMessageDialog(this, "Koneksi berhasil");
        } else {
            JOptionPane.showMessageDialog(this, "Koneksi gagal");
        }

        String query = "SELECT * FROM jadwal";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            DefaultTableModel model = tiketPesawat.getJadwalTableModel();
            model.setRowCount(0); // Clear the existing table data

            while (resultSet.next()) {
                String idPenerbangan = resultSet.getString("id_penerbangan");
                String namaMaskapai = resultSet.getString("nama_maskapai");
                String asal = resultSet.getString("asal");
                String tujuan = resultSet.getString("tujuan");
                String hari = resultSet.getString("hari");
                double waktu = resultSet.getTime("jam").getTime();
                String tipe = resultSet.getString("tipe");
                double harga = resultSet.getDouble("harga");

                // Add the fetched data to the JTable
                model.addRow(new Object[]{idPenerbangan, namaMaskapai, asal, tujuan, hari, waktu, tipe, harga});
            }

            // Set model pada JTable di TiketPesawat
            tiketPesawat.setJadwalTableModel(model);

            // Perbarui tampilan tabel di TiketPesawat
            tiketPesawat.updateJadwalTable();
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saat mengambil data dari database.");
    }
    }

    private void saveDataToDatabase(LocalTime localTime) throws SQLException {
    Connection connection = null;
    try {
        connection = koneksi.getConnection();
        String query = "INSERT INTO jadwal (id_penerbangan, nama_maskapai, asal, tujuan, hari, jam, tipe, harga) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, tfID.getText());
            preparedStatement.setString(2, tfMaskapai.getText());
            preparedStatement.setString(3, tfAsal.getText());
            preparedStatement.setString(4, (String) cbTujuan.getSelectedItem());
            preparedStatement.setString(5, (String) cbHari.getSelectedItem());
            preparedStatement.setTime(6, java.sql.Time.valueOf(localTime));
            preparedStatement.setString(7, (String) cbTipe.getSelectedItem());
            preparedStatement.setDouble(8, Double.parseDouble(tfHarga.getText()));

            preparedStatement.executeUpdate();
        }
    } catch (SQLException | NumberFormatException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error while saving data to the database.", "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (connection != null) {
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}
    
    private Object[] getDataFromForm(boolean useTimeFormatter) {
    // Misalnya, Anda memiliki JComboBox untuk setiap input
    String idPenerbangan = tfID.getText();
    String namaMaskapai = tfMaskapai.getText();
    String asal = tfAsal.getText();
    String tujuan = (String) cbTujuan.getSelectedItem(); // Menggunakan combo box
    String hari = (String) cbHari.getSelectedItem(); // Menggunakan combo box
    // Mengambil nilai dari JComboBox waktu (jComboBox1)
    String jam = (String) cbJam.getSelectedItem();
    String tipe = (String) cbTipe.getSelectedItem(); // Menggunakan combo box
    double harga = Double.parseDouble(tfHarga.getText()); // Menggunakan tipe data double

    // Anda dapat memeriksa dan memvalidasi data di sini

    // Kemudian, kembalikan data sebagai array Object
    Object[] data = {idPenerbangan, namaMaskapai, asal, tujuan, hari, jam, tipe, harga};

    return data;
    
}
    

    private void isiCbKota() {
        try {
            Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            String sql = "SELECT nama_kota FROM kota";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                cbTujuan.addItem(rs.getString("nama_kota"));
            }

            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
